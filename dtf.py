# -*- coding: utf-8 -*-
"""DTF

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zdmjHxVQRegr3MjzXEA3F4DZiq3qCXnL
"""

import random
import numpy as np

def ddft(signal, N, eps):
    f_trans = []
    for i in range(N):
        temp = 0
        for j in range(N):
            temp += signal[j] * np.exp(-eps * j * i)
        f_trans.append(temp/np.sqrt(N))
    return np.array(f_trans)


def idft(signal, N, eps):
    f_trans = []
    for i in range(N):
        temp = 0
        for j in range(N):
            temp += signal[j] * np.exp(eps * j * i)
        f_trans.append(temp/np.sqrt(N))
    return np.array(f_trans)

N = 100
init_signal = []
for _ in range(N):
    init_signal.append(random.random())
h = 2 * np.pi / N
eps = 1j * h


direct_trans = ddft(init_signal, N, eps)
inv_trans = idft(direct_trans, N, eps)

print('init signal:')
for i in range(5):
    print(init_signal[i])
print('\n\ninverse dft:')
for i in range(5):
    print(np.real(inv_trans[i]))
print('\nnorm:', np.linalg.norm(inv_trans - init_signal))